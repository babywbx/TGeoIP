# Workflow By wbx
name: Update TGeoIP Data

# Defines the triggers for this workflow.
on:
  # Trigger on pushes to the main branch.
  push:
    branches:
      - main
    paths:
      - 'main.go'
      - '.github/workflows/**'
  
  # Triggers the workflow on a schedule.
  schedule:
    - cron: '0 * * * *'
  
  # Also allow manual runs from the Actions tab.
  workflow_dispatch:

# Grant write permissions to the GITHUB_TOKEN for pushing commit results.
permissions:
  contents: write

# Define the main job for this workflow.
jobs:
  update-geoip:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository's code to the runner.
      - name: Checkout main branch
        uses: actions/checkout@v4

      # Step 2: Download the MMDB database required by the application.
      - name: Download IPinfo MMDB Database
        run: |
          DB_FILE="ipinfo_lite.mmdb"
          # The URL uses the IPINFO_TOKEN secret for authentication.
          DOWNLOAD_URL="https://ipinfo.io/data/ipinfo_lite.mmdb?token=${{ secrets.IPINFO_TOKEN }}"
          echo "Downloading MMDB database..."
          curl -L "$DOWNLOAD_URL" -o "$DB_FILE"
          # Check if the downloaded file is not empty to ensure success.
          if [ ! -s "$DB_FILE" ]; then
            echo "Database download failed or file is empty!"
            exit 1
          fi

      # Step 3: Set up the Go environment.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      # Step 4: Run the main Go application.
      - name: Run Go Application
        env:
          # Pass the downloaded database path to the Go program.
          DB_PATH: ipinfo_lite.mmdb
        run: |
          go mod tidy
          go run .

      # Step 5: Commit and push the generated files to the 'geoip' branch.
      - name: Commit and Push Changes
        run: |
          # Configure git to use the built-in bot identity.
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Create a new orphan branch with no history or files.
          git checkout --orphan geoip-temp
          
          # Clean the working directory from any old files.
          git rm -rf .
          
          # Move the generated .txt files from the geoip subfolder to the root.
          # The `|| true` prevents errors if the folder doesn't exist.
          mv geoip/* . || true
          
          # Add all .txt files in the root to the staging area.
          git add *.txt
          
          # Only commit if there are actual changes.
          if git diff --staged --quiet; then
            echo "No changes in generated files. Nothing to commit."
            exit 0
          fi
          
          # Commit with a conventional message and [skip ci] tag.
          git commit -m "ðŸ¤– chore(geoip): auto-update geoip data [skip ci]"
          
          # Force push the temporary branch to the remote 'geoip' branch,
          # completely replacing its content.
          git push -f https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} geoip-temp:geoip
